#!/usr/bin/env bash

set -euo pipefail
# set -x

locations=(home ogd)

concat() {
  str="${1?Need string}"
  times="${2?Need repetitions}"

  for((i=0; i < times; i++)); do
    printf '%s' "$str"
  done
}

for location in "${locations[@]}"; do
  mapfile -t typescripts < <(find "$location" -type f,l -name '*.ts' -not -iwholename '*/global/*')
  mapfile -t globals < <(cd "$location/global" && find -L -- * -type f -name '*.ts')


  for ts in "${typescripts[@]}"; do
    printf '%s\n' "$ts"

    depth="${ts//[^\/]}"
    depth="${#depth}"

    root_relative="$(concat '../' "$depth")"
    global_relative="$(concat '../' "$((depth - 1))")"

    printf -v global_scripts "\"${global_relative}global/%s\"," "${globals[@]}"

    jq --null-input \
       --arg root_relative "$root_relative" \
       --arg global_relative "$global_relative" \
       --argjson globals "[${global_scripts%,}]" \
       --arg ts "${ts##*/}" \
       '{
          extends: "\($root_relative)tsconfig.json",
          files: (["\($root_relative)iobroker.d.ts"] + ($globals | sort) + [$ts]),
          compilerOptions: {
            composite: true,
            rootDir: $global_relative
          }
        }' > "${ts%.ts}.tsconfig.json"

    npx prettier --write "${ts%.ts}.tsconfig.json"

  done
done

mapfile -t tsconfigs < <(find "${locations[@]}" -mindepth 1 -type f -name '*.tsconfig.json' | sort)

paths=''
for tsconfig in "${tsconfigs[@]}"; do
  paths+="{ \"path\": \"$tsconfig\" },"
done

jq --null-input \
   --argjson references "[${paths%,}]" \
  '{
     extends: "./tsconfig.base.json",
     exclude: ["*"],
     references: ($references | sort_by(.path))
  }' > tsconfig.json

npx prettier --write tsconfig.json
